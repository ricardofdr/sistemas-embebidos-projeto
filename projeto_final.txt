#include <SPI.h>
#include <MFRC522.h>

#define BAUD_RATE 9600
#define BAUD_RATE_DIVISOR (F_CPU / 16 / BAUD_RATE - 1)

MFRC522 mfrc522(10, 9);

#define GATE_TRIG_DDR DDRD
#define GATE_TRIG_PORT PORTD
#define GATE_TRIG_BIT PORTD7
#define GATE_ECHO_PIN PINB
#define GATE_ECHO_BIT PINB0

#define PARK1_TRIG_PIN A0
#define PARK1_ECHO_PIN A1
#define PARK2_TRIG_PIN A2
#define PARK2_ECHO_PIN A3
#define PARK3_TRIG_PIN A4
#define PARK3_ECHO_PIN A5

#define GREEN_LED PD6
#define YELLOW1_LED PD4
#define YELLOW2_LED PD5
#define YELLOW3_LED PD2

bool gateOpen = false;
bool carPresent = false;
bool waitingForCarEntry = false;
unsigned long lastRFIDRead = 0;
unsigned long lastGateClose = 0;
unsigned long lastParkingCheck = 0;
const long rfidCooldown = 2000;
const long gateCloseDelay = 3000;
const long parkingCheckInterval = 500;
const int gateDistanceThreshold = 10;
const int parkDistanceThreshold = 20;

volatile bool park1_occupied = false;
volatile bool park2_occupied = false;
volatile bool park3_occupied = false;
volatile int total = 0;

void USART_init(void) {
  UCSR0A = 0;
  UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  UBRR0 = BAUD_RATE_DIVISOR;
}

void USART_transmit(char data) {
  while (!(UCSR0A & (1 << UDRE0)))
    ;
  UDR0 = data;
}

void USART_transmit_string(const char* str) {
  while (*str) {
    USART_transmit(*str++);
  }
}

void setGateState(bool open) {
  if (open && !gateOpen) {
    USART_transmit_string("Opening gate: OCR2B = 62\n");
    OCR2B = 62;
    gateOpen = true;
  } else if (!open && gateOpen) {
    USART_transmit_string("Closing gate: OCR2B = 12\n");
    OCR2B = 12;
    gateOpen = false;
  }
}

void updateLEDs() {
  if (total < 3) {
    PORTD |= (1 << GREEN_LED);
    USART_transmit_string("Parking available.\n");
  } else {
    PORTD &= ~(1 << GREEN_LED);
    USART_transmit_string("Parking full.\n");
  }
  PORTD = (PORTD & ~((1 << YELLOW1_LED) | (1 << YELLOW2_LED) | (1 << YELLOW3_LED))) | (park1_occupied << YELLOW1_LED) | (park2_occupied << YELLOW2_LED) | (park3_occupied << YELLOW3_LED);
}

void setup() {
  SPI.begin();
  mfrc522.PCD_Init();

  USART_init();
  USART_transmit_string("System initialized.\n");

  GATE_TRIG_DDR |= (1 << GATE_TRIG_BIT);
  GATE_TRIG_PORT &= ~(1 << GATE_TRIG_BIT);
  DDRB &= ~(1 << DDB0);

  DDRC |= (1 << DDC0) | (1 << DDC2) | (1 << DDC4);
  DDRC &= ~((1 << DDC1) | (1 << DDC3) | (1 << DDC5));
  PORTC &= ~((1 << PC0) | (1 << PC2) | (1 << PC4));

  DDRD |= (1 << DDD3);
  DDRD |= (1 << GREEN_LED) | (1 << YELLOW1_LED) | (1 << YELLOW2_LED) | (1 << YELLOW3_LED);
  PORTD &= ~((1 << YELLOW1_LED) | (1 << YELLOW2_LED) | (1 << YELLOW3_LED));
  PORTD |= (1 << GREEN_LED);

  TCCR2A = (1 << COM2B1) | (0 << COM2B0) | (1 << WGM20) | (0 << WGM21);
  TCCR2B = (1 << WGM22) | (1 << CS22) | (0 << CS21) | (0 << CS20);
  OCR2A = 249;
  OCR2B = 12;
  USART_transmit_string("Servo initialized: OCR2B = 12 (closed)\n");

  updateLEDs();
}

void loop() {
  unsigned long currentMillis = millis();

  if (currentMillis - lastRFIDRead >= rfidCooldown) {
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      String uid = "";
      for (byte i = 0; i < mfrc522.uid.size; i++) {
        char buf[3];
        sprintf(buf, "%02X", mfrc522.uid.uidByte[i]);
        uid += buf;
      }
      uid.toUpperCase();

      USART_transmit_string("UID: ");
      USART_transmit_string(uid.c_str());
      USART_transmit_string("\n");

      if (uid == "9D227789" && total < 3) {
        USART_transmit_string("Access granted (entry). Opening gate.\n");
        setGateState(true);
        waitingForCarEntry = true;
        carPresent = false;
      } else {
        USART_transmit_string(total >= 3 ? "Access denied: Parking full.\n" : "Access denied: Invalid card.\n");
        if (!waitingForCarEntry && !carPresent) {
          setGateState(false);
        }
      }

      lastRFIDRead = currentMillis;
    }
  }

  if (currentMillis - lastParkingCheck >= parkingCheckInterval) {
    checkParkingSlots();
    lastParkingCheck = currentMillis;
    updateLEDs();
  }

  unsigned long dist = readUltrasonicDistance();

  char distStr[32];
  sprintf(distStr, "Gate distance: %lu cm\n", dist);
  USART_transmit_string(distStr);

  if (dist < gateDistanceThreshold && dist != 0) {
    if (!carPresent) {
      USART_transmit_string("Car detected (entry/leaving). Opening gate.\n");
      carPresent = true;
      if (waitingForCarEntry) {
        total = min(total + 1, 3);
        char totalStr[32];
        sprintf(totalStr, "Car entering. Total cars: %d\n", total);
        USART_transmit_string(totalStr);
        updateLEDs();
      }
    }
    setGateState(true);
    lastGateClose = currentMillis;
  } else if (carPresent && currentMillis - lastGateClose >= gateCloseDelay) {
    USART_transmit_string("Car left. Closing gate.\n");
    setGateState(false);
    if (!waitingForCarEntry) {
      total = max(total - 1, 0);
      char totalStr[32];
      sprintf(totalStr, "Car exited. Total cars: %d\n", total);
      USART_transmit_string(totalStr);
      updateLEDs();
    }
    waitingForCarEntry = false;
    carPresent = false;
    lastGateClose = currentMillis;
  }
}

void checkParkingSlots() {
  int dist1 = measureDistance(PARK1_TRIG_PIN, PARK1_ECHO_PIN);
  park1_occupied = (dist1 < parkDistanceThreshold && dist1 > 0);
  char distStr1[32];
  sprintf(distStr1, "Park 1: %s (%d cm)\n", park1_occupied ? "occupied" : "free", dist1);
  USART_transmit_string(distStr1);

  int dist2 = measureDistance(PARK2_TRIG_PIN, PARK2_ECHO_PIN);
  park2_occupied = (dist2 < parkDistanceThreshold && dist2 > 0);
  char distStr2[32];
  sprintf(distStr2, "Park 2: %s (%d cm)\n", park2_occupied ? "occupied" : "free", dist2);
  USART_transmit_string(distStr2);

  int dist3 = measureDistance(PARK3_TRIG_PIN, PARK3_ECHO_PIN);
  park3_occupied = (dist3 < parkDistanceThreshold && dist3 > 0);
  char distStr3[32];
  sprintf(distStr3, "Park 3: %s (%d cm)\n", park3_occupied ? "occupied" : "free", dist3);
  USART_transmit_string(distStr3);
}

unsigned long readUltrasonicDistance() {
  GATE_TRIG_PORT &= ~(1 << GATE_TRIG_BIT);
  delayMicroseconds(2);
  GATE_TRIG_PORT |= (1 << GATE_TRIG_BIT);
  delayMicroseconds(10);
  GATE_TRIG_PORT &= ~(1 << GATE_TRIG_BIT);

  unsigned long start = micros();
  while (!(GATE_ECHO_PIN & (1 << GATE_ECHO_BIT))) {
    if (micros() - start > 30000) return 0;
  }

  unsigned long echoStart = micros();
  while (GATE_ECHO_PIN & (1 << GATE_ECHO_BIT)) {
    if (micros() - echoStart > 30000) return 0;
  }

  unsigned long duration = micros() - echoStart;
  return duration / 58;
}

unsigned long measureDistance(int trigPin, int echoPin) {
  if (trigPin == PARK1_TRIG_PIN) PORTC &= ~(1 << PC0);
  else if (trigPin == PARK2_TRIG_PIN) PORTC &= ~(1 << PC2);
  else if (trigPin == PARK3_TRIG_PIN) PORTC &= ~(1 << PC4);
  delayMicroseconds(2);

  if (trigPin == PARK1_TRIG_PIN) PORTC |= (1 << PC0);
  else if (trigPin == PARK2_TRIG_PIN) PORTC |= (1 << PC2);
  else if (trigPin == PARK3_TRIG_PIN) PORTC |= (1 << PC4);
  delayMicroseconds(10);
  if (trigPin == PARK1_TRIG_PIN) PORTC &= ~(1 << PC0);
  else if (trigPin == PARK2_TRIG_PIN) PORTC &= ~(1 << PC2);
  else if (trigPin == PARK3_TRIG_PIN) PORTC &= ~(1 << PC4);

  uint8_t echoBit;
  if (echoPin == PARK1_ECHO_PIN) echoBit = PC1;
  else if (echoPin == PARK2_ECHO_PIN) echoBit = PC3;
  else echoBit = PC5;

  unsigned long start = micros();
  while (!(PINC & (1 << echoBit))) {
    if (micros() - start > 30000) return 0;
  }

  unsigned long echoStart = micros();
  while (PINC & (1 << echoBit)) {
    if (micros() - echoStart > 30000) return 0;
  }

  unsigned long duration = micros() - echoStart;
  return duration / 58;
}